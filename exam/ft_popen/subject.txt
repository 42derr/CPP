******************************************************************************

                                ft_popen

******************************************************************************

• Summary:
You must implement a simplified version of the `popen` function. Your function 
should run a shell command and return a file descriptor that allows reading 
or writing to the command's stdin or stdout, depending on the mode specified.

• Function Prototype:
int ft_popen(const char *file, const char *argv[], char type);

• Usage:
    const char *argv[] = {"ls", "-l", NULL};
    int fd = ft_popen("/bin/ls", argv, 'r');
    char *line;
    while ((line = get_next_line(fd)))
        printf("%s", line);

• Instructions:
Your `ft_popen` function must:
- Fork a child process.
- Create a pipe to communicate between parent and child.
- If `type == 'r'`, the parent should read from the child’s stdout.
- If `type == 'w'`, the parent should write to the child’s stdin.
- Use `execvp(file, argv)` to execute the command in the child.
- Return the appropriate file descriptor to the parent.

• Allowed functions:
- fork
- pipe
- dup2
- close
- execvp
- exit

• Forbidden:
- popen
- fopen
- any stdlib I/O (fread, fwrite, etc.)
- threads
- libraries other than libc

• Example Scenarios:

    If type == 'r':
        - Parent reads command output
        - Child stdout → pipe write-end
        - Parent reads from pipe read-end

    If type == 'w':
        - Parent writes into child input
        - Child stdin ← pipe read-end
        - Parent writes to pipe write-end

• Evaluation:

    - Compilation:        [ ] OK    [ ] KO
    - 'r' Mode:           [ ] OK    [ ] KO
    - 'w' Mode:           [ ] OK    [ ] KO
    - Pipe handling:      [ ] OK    [ ] KO
    - Proper forking:     [ ] OK    [ ] KO
    - execvp usage:       [ ] OK    [ ] KO
    - File descriptor:    [ ] OK    [ ] KO
    - Code quality:       [ ] OK    [ ] KO
    - Memory leaks:       [ ] OK    [ ] KO

• Tips:
- Always close unused ends of pipes.
- Be sure to handle pipe direction depending on the mode.
- Don’t forget to check `argv` is NULL-terminated for execvp.
- `dup2` is essential to redirect stdin or stdout in the child.

******************************************************************************

