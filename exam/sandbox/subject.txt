******************************************************************************

                                sandbox

******************************************************************************

• Summary:
You must implement a function that runs another function in a sandboxed environment,
meaning in a child process with a timeout. You should also safely handle 
signals, timeouts, and exit codes, and print diagnostics when verbose mode is enabled.

• Function Prototype:
int sandbox(void (*f)(void), unsigned int timeout, bool verbose);

• Instructions:
Your `sandbox` function must:
- Run the function `f` in a child process using `fork`.
- Use `alarm` to set a timeout.
- Use `waitpid` to retrieve the child's exit status.
- If the child exits normally, return its exit code.
- If the child is terminated by a signal, return 128 + signal number.
- If the function takes too long, kill it and return 255.
- If `verbose` is true, print debug messages using `printf`.

• Allowed functions:
- fork
- waitpid
- alarm
- kill
- signal
- sigaction
- strsignal
- printf
- exit
- _Exit

• Forbidden:
- Threads
- External libraries
- Any functions not listed above

• Examples of verbose output:

    printf("Bad function exited with code %d\n", code);
    printf("Bad function (timeout in %u seconds)\n", timeout);
    printf("Bad function (signal: %s)\n", strsignal(sig));
    printf("Nice Function!\n");

• Evaluation:

    - Compilation:        [ ] OK    [ ] KO
    - Normal exit:        [ ] OK    [ ] KO
    - Timeout handling:   [ ] OK    [ ] KO
    - Signal handling:    [ ] OK    [ ] KO
    - Verbose output:     [ ] OK    [ ] KO
    - Code quality:       [ ] OK    [ ] KO
    - Memory leaks:       [ ] OK    [ ] KO

• Tips:
- Use `alarm(timeout)` in the child process to auto-kill long-running functions.
- Use `waitpid` in the parent to monitor the child.
- Consider using `sigaction` to trap `SIGALRM` or child death properly.
- Always _Exit in the child process after f() runs.

******************************************************************************

